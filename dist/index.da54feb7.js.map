{"mappings":"AACA,MAAM,IAAI;IACR,YAAY,iBAAiB,EAAE,kBAAkB,EAAE,QAAQ,CAAE;QAC3D,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,AAAC,CAAC,GAAG,EAAE,GAAI,IAAI,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;KACpB;IAED,YAAY,GAAG,CAAC,gBAAgB,EAAE,UAAU,GAAG;QAC7C,MAAM,kBAAkB,GAAG,UAAU,GAAG,gBAAgB,AAAC;QACzD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC/C,MAAM,IAAI,GAAI,AAAC,IAAI,CAAC,aAAa,GAAG,kBAAkB,GAAE,GAAG,AAAC;QAC5D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,GAAC,GAAG,CAAC;KACzC,CAAA;IAED,wBAAwB;IACxB,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,iBAAiB;IACjB,MAAM;IACN,IAAI;IAEJ,2BAA2B;IAE3B,YAAY,GAAG,IAAM;QACnB,MAAM,gBAAgB,GAAG,EAAE,AAAC,EAAC,SAAS;QACtC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QACtC,IAAI,CAAC,KAAK,EAAG,CAAC;QACd,IAAI,IAAI,EAAE,aAAa,AAAC;QACxB,MAAM,SAAS,GAAG,AAAC,EAAE,GAAG,EAAE,GAAI,IAAI,CAAC,QAAQ,AAAC;QAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,AAAC;QAC3B,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,AAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,OAAO;QACvC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAM;YACjC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACvC,IAAI,CAAC,iBAAiB,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACvD,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACxD,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACrC,IAAI,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC1B,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC9B,IAAI,CAAC,iBAAiB,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC1C,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,IAAI,CAAC;aAC5C;SACF,EAAE,IAAI,CAAC,CAAC;KACV,CAAC;IAEF,qBAAqB;IACrB,iBAAiB,GAAG,IAAI;QACtB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC/B,CAAA;CACF","sources":["engine.js"],"sourcesContent":["\nclass Pomo {\n  constructor(minutePlaceholder, secondsPlaceholder, progress) {\n    this.level = 0;\n    this.completedSessions = 0;\n    this.minutePlaceholder = minutePlaceholder;\n    this.secondsPlaceholder = secondsPlaceholder;\n    this.Max_Level = 4;\n    this.MiliDay = 86400000;\n    this.MiliHour = (1 / 24) * this.MiliDay;\n    this.progressBar = progress;\n    this.remainingTime = 0;\n    this.Future25 = 0;\n    this.countDown = 0;\n  }\n\n  calcProgress = (presentTimeStamp, FutureTime)=>{\n    const ComputedFutureTime = FutureTime - presentTimeStamp;\n    this.remainingTime = this.remainingTime - 1000;\n    const Diff = ((this.remainingTime / ComputedFutureTime)*100)\n    this.progressBar.style.width = Diff+\"%\";\n  }\n\n  //this.longBreak = ()=>{\n  //  const theTime = {\n  //    hours: 0,\n  //    minutes: 0,\n  //    seconds: 0,\n  //  };\n  //};\n\n  //this.shortBreak = ()=>{};\n\n  focusSession = () => {\n    const MaxProgressWidth = 20; //in rem;\n    this.progressBar.style.width = \"100%\";\n    this.level ++;\n    let Diff, progressWidth;\n    const PomoSlice = (25 / 60) * this.MiliHour;\n    const MiliNow = Date.now();\n    const Future25 = MiliNow + PomoSlice;\n    this.Future25 = Future25;\n    this.remainingTime = Future25 - MiliNow\n    this.countDown = setInterval(() => {\n      Diff = new Date(Future25 - Date.now());\n      this.minutePlaceholder.textContent = Diff.getMinutes();\n      this.secondsPlaceholder.textContent = Diff.getSeconds();\n      this.calcProgress(MiliNow, Future25);\n      if (Future25 <= Date.now()) {\n        clearInterval(this.countDown);\n        this.minutePlaceholder.textContent = \"00\";\n        this.secondsPlaceholder.textContent = \"00\";\n      }\n    }, 1000);\n  };\n\n  //pause focus session\n  pauseFocusSession = ()=>{\n    clearInterval(this.countDown);\n  }\n}\n\n"],"names":[],"version":3,"file":"index.da54feb7.js.map","sourceRoot":"/__parcel_source_root/"}